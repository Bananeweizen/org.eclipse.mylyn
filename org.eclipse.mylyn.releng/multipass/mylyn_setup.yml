#
# Globale Facts setzen
#
- hosts: localhost
  gather_facts: true
  tasks:
    - name: set global var
      ansible.builtin.set_fact:
        grp_prefix: "{{ prefix | default('mylyn')}}"
        local_domain: "{{ loc_dom | default('mylyn.local')}}"
        docker_swarm_recreate: "{{ swarm_recreate | default(false) }}"
        
    - name: build setup_lst
      ansible.builtin.set_fact:
        setup_lst: "{{ setup_lst | default([]) + [ { 'name': item, 'ip4': hostvars[item].ansible_host } ] }}"
      with_items:
        - "{{ groups[grp_prefix + \"_admin\"] }}"
        - "{{ groups[grp_prefix + \"_swarm_master\"] }}"
        - "{{ groups[grp_prefix + \"_swarm_worker\"] }}"
    - name: "setup Liste for {{ grp_prefix }}"
      ansible.builtin.debug: msg="{{ setup_lst }}"
#
# Debugausgaben
#
- hosts: localhost
  gather_facts: true
  tasks:
    - ansible.builtin.debug: msg="host = {{ item }}" verbosity=3
      with_items:
        - "{{ groups[grp_prefix + \"_admin\"] }}"
    - ansible.builtin.debug: msg="master = {{ item }}" verbosity=3
      with_items:
        - "{{ groups[grp_prefix + \"_swarm_master\"] }}"
    - ansible.builtin.debug: msg="worker = {{ item }}" verbosity=3
      with_items:
        - "{{ groups[grp_prefix + \"_swarm_worker\"] }}"
    - ansible.builtin.debug: msg="Hallo local {{ grp_prefix }}" verbosity=3

- hosts: localhost
  gather_facts: false
  roles:
    - role: multipass_create_vm_setup
      tags:
        - base_software
# 
#
# Admin Instanz für Zertifikate und root ca 
#
- hosts: "{{ groups[hostvars['localhost'].grp_prefix + \"_admin\"][0] }}"
  gather_facts: false
  vars:
    rootca_name: "{{ groups[hostvars['localhost'].grp_prefix + \"_admin\"][0] }}"
  roles:
    - role: crtrootca
      vars:
        common_domain_name: "{{ hostvars['localhost'].local_domain }}"
      tags:
        - createValidCertificates
        - base_software
    - role: crtcertificate
      vars:
        subject_alt: 
          - "DNS:*.{{ hostvars['localhost'].local_domain }}"
        common_domain_name: "{{ hostvars['localhost'].local_domain }}"
      tags:
        - createValidCertificates
        - base_software
#
# Alle normalen Knoten mit Zertifikaten versorgen
#
- hosts: "{{ groups[hostvars['localhost'].grp_prefix + \"_hosts\"] }}"
  gather_facts: true
  vars:
    rootca_name: "{{ groups[hostvars['localhost'].grp_prefix + \"_admin\"][0] }}"
  roles:
    - role: crtcertificate
      tags:
        - createValidCertificates
        - base_software
      vars:
        subject_alt: 
          - "DNS:{{ inventory_hostname }}.{{ hostvars['localhost'].local_domain }}"
        common_domain_name: "{{ hostvars['localhost'].local_domain }}"
    - role: dockerhost
      tags:
        - base_software
#
# Alle normalen Knoten Docker installieren
#
- hosts: "{{ groups[hostvars['localhost'].grp_prefix + \"_hosts\"] }}"
  roles:
    - role: dockerhost
      tags:
        - base_software
  tasks:
    - name: Ensure docker deamon is running
      service:
        name: docker
        state: started
      become: true
    - name: Creates directory certs
      ansible.builtin.file:
            path: "/mylyn-config-dir/certs"
            state: directory
            owner: ubuntu
            group: ubuntu
            mode: '0755'
    - name: Synchronization root ca
      ansible.posix.synchronize:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      delegate_to: "{{ groups[hostvars['localhost'].grp_prefix + \"_admin\"][0] }}"
      loop:
        - {src: "/cacerts/root_ca/{{ groups[hostvars['localhost'].grp_prefix + \"_admin\"][0] }}.crt", dest: "/mylyn-config-dir/certs/rootca.crt"}
        - {src: "/cacerts/root_ca/{{ groups[hostvars['localhost'].grp_prefix + \"_admin\"][0] }}.key", dest: "/mylyn-config-dir/certs/rootca.key"}
    - name: get worker certificates
      ansible.posix.synchronize:
        src:  "/cacerts/server_ca/"
        dest: /mylyn-config-dir/certs
      delegate_to: "{{ item }}"
      with_items: 
        - "{{ groups[hostvars['localhost'].grp_prefix + \"_hosts\"] }}"
#
# Neuen Docker Swarm Leader installieren laufende stacks und services löschen
# Servies starten
#
- hosts: "{{ groups[hostvars['localhost'].grp_prefix + \"_swarm_master\"][0] }}"
  gather_facts: false
  vars:
    swarm_master_name: "{{ groups[hostvars['localhost'].grp_prefix + \"_swarm_master\"][0] }}"
  roles:
    - role: swarm_recreate
      when: hostvars['localhost'].docker_swarm_recreate | bool == true
      tags:
        - docker_swarm_recreate
    - role: swarm_setup
      tags:
        - docker_swarm_setup
    - role: swarm_stop
      when: hostvars['localhost'].docker_swarm_recreate | bool == false

- hosts: "{{ groups[hostvars['localhost'].grp_prefix + \"_hosts\"] }}"
  gather_facts: true
  vars:
    rootca_name: "{{ groups[hostvars['localhost'].grp_prefix + \"_admin\"][0] }}"
  roles:
    - role: docker_cleanup
      tags:
        - docker_cleanup

- hosts: "{{ groups[hostvars['localhost'].grp_prefix + \"_swarm_master\"][0] }}"
  gather_facts: false
  vars:
    swarm_master_name: "{{ groups[hostvars['localhost'].grp_prefix + \"_swarm_master\"][0] }}"
  roles:
    - role: traeefik_swarm
      vars:
        common_domain_name: "{{ hostvars['localhost'].local_domain }}"
    - role: socket-proxy
    - role: mylyn_idx
      vars:
        common_domain_name: "{{ hostvars['localhost'].local_domain }}"
#    - role: hello
#      vars:
#        common_domain_name: "{{ hostvars['localhost'].local_domain }}"
#    - role: jenkins
#      tags:
#        - jenkins
#      vars:
#        common_domain_name: "{{ hostvars['localhost'].local_domain }}"
    - role: bugzilla
      tags:
        - bugzilla
      vars:
        common_domain_name: "{{ hostvars['localhost'].local_domain }}"
        bugzilla_instances:
          - { git_branch: "release-4.4.13", servmame: "bugzilla-4_4", port1: 8090, port2: 8490, image_tag: "4.4", extra_info: '"default": "true"' }
          - { git_branch: "release-4.4.13", servmame: "bugzilla-4_4-custom-wf", port1: 8091, port2: 8491, image_tag: "4.4-custom_wf", extra_info: '"custom_wf":"true"' }
          - { git_branch: "release-4.4.13", servmame: "bugzilla-4_4-custom-wf-and-status", port1: 8092, port2: 8492, image_tag: "4.4-custom_wf_a_s", extra_info: '"custom_wf_and_status":"true"' }
          - { git_branch: "release-4.4.13", servmame: "bugzilla-4_4-bugaliases", port1: 8093, port2: 8493, image_tag: "4.4-bugaliases", extra_info: '"use_bug_alias":"true"' }
          - { git_branch: "5.2", servmame: "bugzilla-5_2", port1: 8094, port2: 8494, image_tag: "5.2", extra_info: '' }
          - { git_branch: "5.2", servmame: "bugzilla-5_2-rest", port1: 8095, port2: 8495, image_tag: "5.2-rest", extra_info: '"rest_enabled":"true", "default": "true", "testdataVersion": "Version1"' }
          - { git_branch: "5.2", servmame: "bugzilla-5_2-rest-api", port1: 8096, port2: 8496, image_tag: "5.2-rest-api", extra_info: '"rest_enabled": "true", "api_key_enabled": "true", "testdataVersion": "Version1"' }
